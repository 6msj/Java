/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import business.Item;
import business.Order;
import business.Supplier;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
/**
 *
 * @author james
 */
@SuppressWarnings("serial")
public class GraphicsListing extends javax.swing.JFrame {

    /**
     * Creates new form GraphicsListing
     */
    public GraphicsListing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jScrollPane1 = new javax.swing.JScrollPane();
                computerOutput = new javax.swing.JTextArea();
                jScrollPane2 = new javax.swing.JScrollPane();
                listOfSupplies__ = new javax.swing.JList();
                jScrollPane3 = new javax.swing.JScrollPane();
                supplierListing__ = new javax.swing.JList();
                exitButton = new javax.swing.JButton();
                jScrollPane4 = new javax.swing.JScrollPane();
                orderListing__ = new javax.swing.JList();
                selectSupplierButton = new javax.swing.JButton();
                removeSupplierButton = new javax.swing.JButton();
                addSupplyButton = new javax.swing.JButton();
                finishOrderButton = new javax.swing.JButton();
                removeSupplyButton = new javax.swing.JButton();
                totalLabel = new javax.swing.JLabel();
                totalTextField = new javax.swing.JTextField();
                jScrollPane5 = new javax.swing.JScrollPane();
                quantityList__ = new javax.swing.JList();
                dateLabel = new javax.swing.JLabel();
                dateTextField = new javax.swing.JTextField();
                jLabel1 = new javax.swing.JLabel();
                deliverButton = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                computerOutput.setColumns(20);
                computerOutput.setRows(5);
                jScrollPane1.setViewportView(computerOutput);

                jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Supplies"));

                jScrollPane2.setViewportView(listOfSupplies__);

                jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Supplier"));
                jScrollPane3.setViewportView(supplierListing__);

                exitButton.setText("Exit");
                exitButton.setToolTipText("");
                exitButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                exitButtonActionPerformed(evt);
                        }
                });

                jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Order"));

                jScrollPane4.setViewportView(orderListing__);

                selectSupplierButton.setText("Select Supplier");

                removeSupplierButton.setText("Remove Supplier");

                addSupplyButton.setText("Add Supply");

                finishOrderButton.setText("Finish Order");

                removeSupplyButton.setText("Remove Supply");

                totalLabel.setText("Total:");

                jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Quantity"));

                jScrollPane5.setViewportView(quantityList__);

                dateLabel.setText("Date:");

                jLabel1.setText("James Nguyen");

                deliverButton.setText("Deliver");

                org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 397, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(jScrollPane4)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(jScrollPane1)
                                                        .add(layout.createSequentialGroup()
                                                                .add(6, 6, 6)
                                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                                        .add(layout.createSequentialGroup()
                                                                                .add(jLabel1)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .add(exitButton))
                                                                        .add(layout.createSequentialGroup()
                                                                                .add(selectSupplierButton)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(removeSupplierButton)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(addSupplyButton)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(removeSupplyButton)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(finishOrderButton)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(deliverButton)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(dateLabel)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(dateTextField)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(totalLabel)
                                                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                                                .add(totalTextField)))))
                                                .addContainerGap())))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jScrollPane2)
                                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                                        .add(jScrollPane4)
                                        .add(jScrollPane5))
                                .add(11, 11, 11)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(selectSupplierButton)
                                        .add(removeSupplierButton)
                                        .add(addSupplyButton)
                                        .add(finishOrderButton)
                                        .add(removeSupplyButton)
                                        .add(totalLabel)
                                        .add(totalTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(dateLabel)
                                        .add(dateTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(deliverButton))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel1)
                                        .add(exitButton))
                                .addContainerGap())
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // Exit the application
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicsListing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicsListing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicsListing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicsListing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        // The object that controls all input/output.
        final GraphicsListing Listing = new GraphicsListing();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new GraphicsListing().setVisible(true);
                Listing.setVisible(true);
            }
        });
        Listing.startListing();
        Listing.outPut_PromptUser();
    }
    
    String userCurrentInput;
    ArrayList<Supplier> listSuppliers; // the list of suppliers, only one is created in the driver
    Scanner userInputGetter; // scanner for user input
    boolean supplierLocked;
        

    /* Set the program Listing up as well as set the list models. */
    void startListing() {
	    supplierLocked = false; // let the user poke around before settling in on a supplier
		userCurrentInput = new String();
        userInputGetter = new Scanner(System.in);
        listSuppliers = new ArrayList<>();
        Supplier firstSupplier = new Supplier("J");  // list two suppliers in this program
		Supplier secondSupplier = new Supplier("Extra"); // ideally, open up a list of suppliers from a file
        listSuppliers.add(firstSupplier);
		listSuppliers.add(secondSupplier);
		DefaultListModel listModel;
		listModel = new DefaultListModel();
		listModel.addElement("J");
		listModel.addElement("Extra");
		supplierListing__.setModel(listModel);
		listOfSupplies__.setModel(new DefaultListModel());
		orderListing__.setModel(new DefaultListModel());
		quantityList__.setModel(new DefaultListModel());
		computerOutput.setEditable(false); // user can't edit text area
    }

    /* Users get to make a choice between selecting a supplier and entering the supplier by name.
     * If there is an input, print the contents of the supplier picked to the right pane in the JList.*/
    public void gui_createListenersForSupplierChoice() {
		createMouseSelect();
		createSelectSupplierButton();
		createRemoveSupplierButton();
		createAddSupplyButton();
		createRemoveSupplyButton();
		createFinishOrderButton();
		createDeliverButton();
    }

    public void createMouseSelect() {
		MouseListener mouseListener = new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if(e.getClickCount() == 1 && !supplierLocked) {
					userCurrentInput = (String) supplierListing__.getSelectedValue();
					outPut_printSuppliesToScreen(getSupplier());
				}
			}
		};
		this.supplierListing__.addMouseListener(mouseListener);
    }

    public void createSelectSupplierButton() {
		this.selectSupplierButton.addActionListener(new ActionListener() {
			@Override
		    public void actionPerformed(ActionEvent e) {
				// supplier list becomes locked when this button is clicked
				if(!supplierLocked) {
					supplierLocked = !supplierLocked;
				}
				outPut_PickingSupplies();
				printOldOrders(getSupplier());
		    }
	    }); 
    }

    public void createRemoveSupplierButton() {
		this.removeSupplierButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(!listSuppliers.isEmpty() && !supplierLocked) {
					int selectedIndex = supplierListing__.getSelectedIndex();
					removeFromList(supplierListing__); // remove the supplier from list
					clearAllInLists(listOfSupplies__); // clear the supplies list
					listSuppliers.remove(selectedIndex); // remove from array
				}
			}
		});
    }

    public void createAddSupplyButton() {
	    this.addSupplyButton.addActionListener(new ActionListener() { 
		    public void actionPerformed(ActionEvent e) {
			    if(!supplierLocked) {
				    return; // if not locked, order hasn't started yet, so can't add anything
			    }
			    addingElementToOrder(orderListing__, listOfSupplies__.getSelectedValue());
		    }
	    });
    }

    public void createRemoveSupplyButton() {
	    this.removeSupplyButton.addActionListener(new ActionListener() { 
		    public void actionPerformed(ActionEvent e) {
			    if(!supplierLocked) {
				    return; // if not locked, can't remove anything from something that hasn't happened yet
			    }
			    removeFromList(orderListing__); // remove it from the order list
		    }
	    });
    }

    public void createFinishOrderButton() {
	    this.finishOrderButton.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
			    if(!supplierLocked) {
				    return;
			    }
			    Order newOrder = new Order(); // Create a new order.
			    DefaultListModel quanModel = (DefaultListModel) quantityList__.getModel();
			    for(int i=0; i<orderListing__.getModel().getSize(); i++) {
				    Item oneOrderedItem = getItemFromOrderList(orderListing__, i);
				    int quantity = Integer.valueOf(quanModel.getElementAt(i).toString());
				    newOrder.addItem(oneOrderedItem, quantity);
			    }

			    newOrder.recordDate(setDate()); // record and set the date
			    getSupplier().addOrderToBrain(newOrder);
			    totalTextField.setText("" + newOrder.getTotalPrice() + ".00 $$"); // set the total price in price label
			    appendCompleteOrder(getSupplier(), newOrder);
			    saveToFile(getSupplier());
		    }
	    });
    }

    public void createDeliverButton() {
	    this.deliverButton.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
			    if(!supplierLocked) {
				    return;
			    }
			    int indexOrder = getSupplier().callBrainToGetOrders().size()-1;
			    Order deliveredOrder = getSupplier().callBrainToGetOrders().get(indexOrder);
			    deliveredOrder.checkOrderDelivered();
			    computerOutput.setText("Your order has been delivered on and received 3 days after " + dateTextField.getText() + ".");
		    }
	    });
    }

    public String setDate() {
	    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	    // get the current date and time with Date()
	    Date date = new Date();
	    String currentDate = dateFormat.format(date);
	    this.dateTextField.setText(currentDate);
	    return currentDate;
    }

    /* Using the string from order list, find the item id  and use that to get the actual item.
     * Return that item so it can be added to the order. */
    public Item getItemFromOrderList(JList list, int index) {
	    ArrayList<Item> itemsFromSupplier = getSupplier().getItemsInInventory();
	    DefaultListModel model = (DefaultListModel) list.getModel();
	    String longString = model.get(index).toString();
	    int positionOfSpace = longString.indexOf(' ');
	    String itemId = longString.substring(0, positionOfSpace);
	    for(int i=0; i<itemsFromSupplier.size(); i++) {
			if(itemsFromSupplier.get(i).getID().equals(itemId)) {
				return itemsFromSupplier.get(i);
			} 
	    }
	    return itemsFromSupplier.get(0); // return the first item, in the program, it wouldn't be able to get here.
    }

    public void addingElementToOrder(JList list, Object element) {
	    DefaultListModel model = (DefaultListModel) list.getModel();
	    DefaultListModel quanModel = (DefaultListModel) this.quantityList__.getModel();
	    for(int i=0; i<model.getSize(); i++) {
		    if(element.equals(model.getElementAt(i))) {
			     Integer number = Integer.valueOf(quanModel.getElementAt(i).toString());
			     number++;
			     quanModel.add(i, number);
			     quanModel.remove(i+1);
			     return;
		    }
	    }
	    model.addElement(element); // if no matches, create a new entry in the order list
	    quanModel.addElement("1"); // add a quantity of 1 to the item
    }

	public void removeFromList(JList selectedList) {
		DefaultListModel model = (DefaultListModel) selectedList.getModel();
		int selectedIndex = selectedList.getSelectedIndex();
		if(selectedIndex != -1) {
			model.remove(selectedIndex);
		}
    }

	/* Saves the most recent order information to the file and overwrites the previous order information. */
    public void saveToFile(Supplier oneSupplier) {
        ArrayList<Order> orders = oneSupplier.callBrainToGetOrders();
        for(int singleorder=0; singleorder<orders.size(); singleorder++) {
            Order oneOrder = orders.get(singleorder);
            String content = oneOrder.returnForFileFormat();
		    System.out.println(content);
            File file = new File(oneSupplier.getName() + "orders.txt");
            if (!file.exists()) {
				try {
					file.createNewFile();
				} catch (IOException ex) {
					System.out.println("Couldn't find or open file to save.");
					Logger.getLogger(GraphicsListing.class.getName()).log(Level.SEVERE, null, ex);
				}
            } // create if it doesn't exist

            FileWriter filewriter;
			    try {
				    filewriter = new FileWriter(file.getAbsoluteFile());
				    try (BufferedWriter bufferedwriter = new BufferedWriter(filewriter)) {
						bufferedwriter.write(content);
				    }
			    } catch (IOException ex) {
				    System.out.println("Couldn't write to file.");
				    Logger.getLogger(GraphicsListing.class.getName()).log(Level.SEVERE, null, ex);
			    }
        }
		this.computerOutput.setText("Saving... ");
    }

    public void appendCompleteOrder(Supplier oneSupplier, Order newOrder) {
	    ArrayList<Order> supplierOrders = oneSupplier.callBrainToGetOrders();
	    supplierOrders.add(newOrder);
    }

	/* Retrive order informtion from file: itemid, name, description, price, quantity, orderPaidFor
	 * Then print the order from the file. */
	public void printOldOrders(Supplier oneSupplier) {
		ArrayList<Order> supplierOrders = oneSupplier.callBrainToGetOrders();
		this.computerOutput.append("\n---------------------------------------\n");
		this.computerOutput.append("The past orders from this supplier are:\n");
		for(int numOrders=0; numOrders<supplierOrders.size(); numOrders++) {
            Order printOrder = supplierOrders.get(numOrders);
            ArrayList<Item> items__ = printOrder.returnListOfItems();
            ArrayList<Integer> quantities__ = printOrder.returnListQuantity();
            for(int numItems=0; numItems<items__.size(); numItems++) {
                Item printItem = items__.get(numItems);
				String oneOldOrder = printItem.getID() + " " + printItem.getName() + " " 
                        + printItem.getDescription() + " " + printItem.getPrice() + " " + quantities__.get(numItems);
				this.computerOutput.append(oneOldOrder + "\n");
            }
        }
	}

  	public void clearAllInLists(JList selectedList) {
	    DefaultListModel listModel = (DefaultListModel) selectedList.getModel();
	    listModel.removeAllElements();
    }

    public void outPut_PromptUser() {
		userCurrentInput = ""; // set the current text input to null;
		this.computerOutput.setText("Which supplier do you want to order from? "
		    + "\nSelect the supplier to view their items."
		    + "\nPress the select button to choose your supplier.");
		gui_createListenersForSupplierChoice();
		// Wait until an adequate input is obtained to continue the program.
		while(userCurrentInput.equals("")) {
			// Nothing to do while waiting.
		}
    }

   	public Supplier getSupplier() {
	    Supplier oneSupplier = null;
		for(int numSuppliers=0; numSuppliers<listSuppliers.size(); numSuppliers++) {
		    oneSupplier = listSuppliers.get(numSuppliers);
		    if(userCurrentInput.equals(oneSupplier.getName())) {
			    return oneSupplier;
		    }
		}
		return oneSupplier;
    }

    // Takes a supplier, and then prints its supplies to the screen in a JList.
    public void outPut_printSuppliesToScreen(Supplier oneSupplier) {
	    this.computerOutput.setText("Items in inventory of Supplier: " + oneSupplier.getName());
	    this.computerOutput.append("\nClick the [Select Supplier] button to get started with your order.");
	    this.computerOutput.append("\nClick the [Remove Supplier] button to remove a Supplier from your Approved Supplier List.");
    	ArrayList<Item> itemsFromSupplier = oneSupplier.getItemsInInventory();
		DefaultListModel listOfSuppliesModel = (DefaultListModel) this.listOfSupplies__.getModel();
		listOfSuppliesModel.clear(); // clear the previous list field
	    for(int numItems=0; numItems<itemsFromSupplier.size(); numItems++) {
		    listOfSuppliesModel.addElement(stringOfItem(itemsFromSupplier.get(numItems)));
	    }
    }

    public String stringOfItem(Item __item__) {
	    String stringItem = new String();
	    stringItem = __item__.getID() + " " + __item__.getName() + " " + __item__.getDescription() + " " + __item__.getPrice();
	    return stringItem;
    }

	public void outPut_PickingSupplies() {
		this.computerOutput.setText("Now that you have picked a supplier. \nYou can select supplies and press add to add them to an order.");
		this.computerOutput.append("\nWhat would you like to order from " + getSupplier().getName());
    }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton addSupplyButton;
        private javax.swing.JTextArea computerOutput;
        private javax.swing.JLabel dateLabel;
        private javax.swing.JTextField dateTextField;
        private javax.swing.JButton deliverButton;
        private javax.swing.JButton exitButton;
        private javax.swing.JButton finishOrderButton;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JScrollPane jScrollPane3;
        private javax.swing.JScrollPane jScrollPane4;
        private javax.swing.JScrollPane jScrollPane5;
        private javax.swing.JList listOfSupplies__;
        private javax.swing.JList orderListing__;
        private javax.swing.JList quantityList__;
        private javax.swing.JButton removeSupplierButton;
        private javax.swing.JButton removeSupplyButton;
        private javax.swing.JButton selectSupplierButton;
        private javax.swing.JList supplierListing__;
        private javax.swing.JLabel totalLabel;
        private javax.swing.JTextField totalTextField;
        // End of variables declaration//GEN-END:variables
}
